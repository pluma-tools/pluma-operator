/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "pluma.io/api/istio/v1alpha1"
)

// IstioOperatorLister helps list IstioOperators.
// All objects returned here must be treated as read-only.
type IstioOperatorLister interface {
	// List lists all IstioOperators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IstioOperator, err error)
	// IstioOperators returns an object that can list and get IstioOperators.
	IstioOperators(namespace string) IstioOperatorNamespaceLister
	IstioOperatorListerExpansion
}

// istioOperatorLister implements the IstioOperatorLister interface.
type istioOperatorLister struct {
	indexer cache.Indexer
}

// NewIstioOperatorLister returns a new IstioOperatorLister.
func NewIstioOperatorLister(indexer cache.Indexer) IstioOperatorLister {
	return &istioOperatorLister{indexer: indexer}
}

// List lists all IstioOperators in the indexer.
func (s *istioOperatorLister) List(selector labels.Selector) (ret []*v1alpha1.IstioOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IstioOperator))
	})
	return ret, err
}

// IstioOperators returns an object that can list and get IstioOperators.
func (s *istioOperatorLister) IstioOperators(namespace string) IstioOperatorNamespaceLister {
	return istioOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IstioOperatorNamespaceLister helps list and get IstioOperators.
// All objects returned here must be treated as read-only.
type IstioOperatorNamespaceLister interface {
	// List lists all IstioOperators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IstioOperator, err error)
	// Get retrieves the IstioOperator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IstioOperator, error)
	IstioOperatorNamespaceListerExpansion
}

// istioOperatorNamespaceLister implements the IstioOperatorNamespaceLister
// interface.
type istioOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IstioOperators in the indexer for a given namespace.
func (s istioOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IstioOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IstioOperator))
	})
	return ret, err
}

// Get retrieves the IstioOperator from the indexer for a given namespace and name.
func (s istioOperatorNamespaceLister) Get(name string) (*v1alpha1.IstioOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("istiooperator"), name)
	}
	return obj.(*v1alpha1.IstioOperator), nil
}
