// Copyright 2019 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// $title: IstioOperator Options
// $description: Configuration affecting Istio control plane installation
// version and shape. $location:
// https://istio.io/docs/reference/config/istio.operator.v1alpha1.html $weight:
// 20 $mode: package

// Configuration affecting Istio control plane installation version and shape.
// Note: unlike other Istio protos, field names must use camelCase. This is
// asserted in tests. Without camelCase, the `json` tag on the Go struct will
// not match the user's JSON representation. This leads to Kubernetes merge
// libraries, which rely on this tag, to fail. All other usages use jsonpb which
// does not use the `json` tag.
package istio.operator.v1alpha1;

option go_package = "istio.io/api/operator/v1alpha1";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

message IstioOperatorSpec {
  // Path or name for the profile e.g.
  //
  // * minimal (looks in profiles dir for a file called minimal.yaml)
  // * /tmp/istio/install/values/custom/custom-install.yaml (local file path)
  //
  // default profile is used if this field is unset.
  string profile = 10;
  // Path for the install package. e.g.
  //
  // * /tmp/istio-installer/nightly (local file path)
  //
  string installPackagePath = 11;
  // Root for docker image paths e.g. `docker.io/istio`
  string hub = 12;
  // Version tag for docker images e.g. `1.7.2`
  google.protobuf.Value tag = 13;

  // $hide_from_docs
  // Resource suffix is appended to all resources installed by each component.
  // Never implemented; replaced by revision.
  string resourceSuffix = 14 [ deprecated = true ];
  // Namespace to install control plane resources into. If unset, Istio will be
  // installed into the same namespace as the `IstioOperator` CR. You must also
  // set `values.global.istioNamespace` if you wish to install Istio in a custom
  // namespace. If you have enabled CNI, you must  exclude this namespace by
  // adding it to the list `values.cni.excludeNamespaces`.
  string namespace = 15;

  // Identify the revision this installation is associated with.
  // This option is currently experimental.
  string revision = 16;

  // Compatibility version allows configuring Istio to behave like an older
  // version by tuning various settings to align with a previous versions
  // defaults. This accepts a `major.minor` format, such as `1.23`. This option
  // is currently experimental.
  string compatibilityVersion = 18;

  reserved 17; //
  reserved "defaultRevision";

  // Config used by control plane components internally.
  google.protobuf.Struct meshConfig = 40;

  // Kubernetes resource settings, enablement and component-specific settings
  // that are not internal to the component.
  google.protobuf.Struct components = 50;

  // Overrides for default `values.yaml`. This is a validated pass-through to
  // Helm templates. See the [Helm installation
  // options](https://istio.io/v1.5/docs/reference/config/installation-options/)
  // for schema details. Anything that is available in `IstioOperatorSpec`
  // should be set above rather than using the passthrough. This includes
  // Kubernetes resource settings for components in `KubernetesResourcesSpec`.
  google.protobuf.Struct values = 100;
  // Unvalidated overrides for default `values.yaml`. Used for custom templates
  // where new parameters are added.
  google.protobuf.Struct unvalidatedValues = 101;
}

// Observed state of IstioOperator
message InstallStatus {
  // Status describes the current state of a component.
  enum Status {
    // Component is not present.
    NONE = 0;
    // Component is being updated to a different version.
    UPDATING = 1;
    // Controller has started but not yet completed reconciliation loop for the
    // component.
    RECONCILING = 2;
    // Component is healthy.
    HEALTHY = 3;
    // Component is in an error state.
    ERROR = 4;
    // Overall status only and would not be set as a component status.
    // Action is needed from the user for reconciliation to proceed
    // e.g. There are proxies still pointing to the control plane revision when
    // try to remove an `IstioOperator` CR.
    ACTION_REQUIRED = 5;
  }
  // VersionStatus is the status and version of a component.
  message VersionStatus {
    string version = 1;
    Status status = 2;
    string error = 4;
  }
  // Overall status of all components controlled by the operator.
  //
  // * If all components have status `NONE`, overall status is `NONE`.
  // * If all components are `HEALTHY`, overall status is `HEALTHY`.
  // * If one or more components are `RECONCILING` and others are `HEALTHY`,
  // overall status is `RECONCILING`.
  // * If one or more components are `UPDATING` and others are `HEALTHY`,
  // overall status is `UPDATING`.
  // * If components are a mix of `RECONCILING`, `UPDATING` and `HEALTHY`,
  // overall status is `UPDATING`.
  // * If any component is in `ERROR` state, overall status is `ERROR`.
  // * If further action is needed for reconciliation to proceed, overall status
  // is `ACTION_REQUIRED`.
  //
  Status status = 1;
  // Optional message providing additional information about the existing
  // overall status.
  string message = 3;
  // Individual status of each component controlled by the operator. The map key
  // is the name of the component.
  map<string, VersionStatus> componentStatus = 2;
}
